plugins {
	id 'fabric-loom' version '1.8-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = "${project.mod_version}+${project.minecraft_base_version}"
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {
		url "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
	mavenLocal()
	maven { url 'https://maven.wispforest.io/releases/' }
	maven { url 'https://maven.terraformersmc.com/releases' }
	maven { url 'https://maven.blamejared.com' }
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.ladysnake.org/releases" }
	maven { url "https://maven.quiltmc.org/repository/release" }
	maven { url "https://jitpack.io" }
	maven { url "https://maven.andante.dev/releases/" }
	maven {
		url "https://maven.jamieswhiteshirt.com/libs-release"
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}
}

sourceSets {
	testmod {
		runtimeClasspath += main.runtimeClasspath
		compileClasspath += main.compileClasspath
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation annotationProcessor("io.wispforest:owo-lib:${project.owo_version}")
	include "io.wispforest:owo-sentinel:${project.owo_version}"

	modImplementation include("me.lucko:fabric-permissions-api:${project.fabric_perms_api}")

	implementation include("net.fabricmc:mapping-io:${project.mapping_io}")
	implementation include("net.auoeke:result:${project.auoeke_result}")
	implementation include("net.auoeke:unsafe:${project.auoeke_unsafe}")
	implementation include("net.auoeke:reflect:${project.auoeke_reflect}")

	modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}"

	modCompileOnly "org.quiltmc:quiltflower:${project.quiltflower}"

	modLocalRuntime "com.terraformersmc:modmenu:${project.modmenu_version}"

//	modLocalRuntime "vazkii.patchouli:Patchouli:1.19.2-76-FABRIC"
//	modLocalRuntime "dev.emi:trinkets:3.4.0"
//	modLocalRuntime "me.shedaniel:RoughlyEnoughItems-fabric:9.1.530"
//	modLocalRuntime "dev.architectury:architectury-fabric:6.3.49"
//	modLocalRuntime "com.glisco:things:0.2.20+1.19"
	modLocalRuntime "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config}"
//	modLocalRuntime "maven.modrinth:auth-me:${project.auth_me}"

	testmodImplementation sourceSets.main.output
}

loom {
	runs {
		testmodClient {
			client()
			name = "Testmod Client"
			source sourceSets.testmod
		}
		testmodServer {
			server()
			name = "Testmod Server"
			source sourceSets.testmod
		}
	}

	accessWidenerPath = file("src/main/resources/gadget.accesswidener")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
		def ENV = System.getenv()

		if (ENV.MAVEN_URL) {
			repositories.maven {
				url ENV.MAVEN_URL
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		}
	}
}
